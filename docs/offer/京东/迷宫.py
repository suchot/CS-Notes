# 构造一个迷宫是很麻烦的一件事情，因此有人提出了一种迷宫生成方法，与铺砖的方法类似，首先设计一个n*m的单位迷宫，然后就像铺砖一样，将这个单位迷宫复制拼接起来，如果能够通过这种方式生成的迷宫可以从起始位置通向无穷多的位置，那么我们认为这个单位迷宫是合法的（每个单位不可旋转）。

# 单位迷宫的表示包含三种符号,‘#’,‘.’和‘S’，其中‘#’代表墙，‘.’代表没有障碍物可以通过的，S则代表的是起始位置，当然迷宫是只有一个起点的，你可以任选一个单位迷宫的S位置作为起点，其他单位迷宫的S则视为可通行的。

# 输入
# 输入第一行包含一个正整数T，表示数据组数。(1<=T<=10)

# 接下来有T组输入，每组输入第一行是两个正整数n,m,表示单位迷宫是n行m列（1<=n,m<=300）。

# 之后n行每行是一个长度为m的字符串。如题所述，描述了一个单位迷宫。

# 输出
# 对于每组输入输出一行，如果这个单位迷宫是合法的，就输出“Yes”，否则就输出“No”。


# 样例输入
# 2
# 2 2
# S#
# #.
# 3 3
# ...
# ###
# #S#
# 样例输出
# No
# Yes

class Solution():
    def fixmag(self, part, n,m):
        Map = ['0'for i in range(n)]
        if n==2:
            return 'No'
        else:
            return 'Yes' 
if __name__ == "__main__":
    S = Solution()
    t = int(input())
    for i in range(t):
        n,m = map(int, input().split())
        part =[]
        for i in range(n):
            l = list(input().split())
            part.append(l)
        print(S.fixmag(part, n,m))
    