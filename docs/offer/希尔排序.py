'''
对于大规模的数组，插入排序很慢，因为它只能交换相邻的元素，每次只能将逆序数量减少 1。

希尔排序的出现就是为了解决插入排序的这种局限性，它通过交换不相邻的元素，每次可以将逆序数量减少大于 1。

希尔排序使用插入排序对间隔 h 的序列进行排序。通过不断减小 h，最后令 h=1，就可以使得整个数组是有序的。



希尔排序的运行时间达不到平方级别，使用递增序列 1, 4, 13, 40, ... 的希尔排序所需要的比较次数不会超过 N 的若干倍乘于递增序列的长度。后面介绍的高级排序算法只会比希尔排序快两倍左右。
'''

class Solution(object):
    def shell_sort(self, num):
        

if __name__ == "__main__":
    # num1 = [1,2,3,4,5]
    num1 = [-3,5, 1,1,3,4,5,6,1,1,2,6]

    S = Solution()
    print(S.shell_sort(num1))